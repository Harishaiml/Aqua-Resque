import cv2 
import mediapipe as mp
from twilio.rest import Client
import math

account_sid = ''
auth_token = ''
twilio_number = ''
user_phone_number = ''

def send_sms(message):
    client = Client(account_sid, auth_token)
    try:
        message = client.messages.create(
            body=message,
            from_=twilio_number,
            to=user_phone_number
        )
        print(f"Message sent successfully: SID {message.sid}")
    except Exception as e:
        print(f"Failed to send message: {e}")

def calculate_distance_2d(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

def calculate_distance_from_camera(bbox_width):
    # Calibration parameters (these would need to be adjusted for your camera and setup)
    KNOWN_WIDTH = 8.0  # Average width of a hand in cm
    FOCAL_LENGTH = 600  # Estimated focal length (in pixels)
    
    if bbox_width == 0:
        return None
    
    distance = (KNOWN_WIDTH * FOCAL_LENGTH) / bbox_width
    return distance

def is_thumbs_up(hand_landmarks, frame):
    thumb_tip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]
    index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]

    thumb_x, thumb_y = int(thumb_tip.x * frame.shape[1]), int(thumb_tip.y * frame.shape[0])
    index_x, index_y = int(index_tip.x * frame.shape[1]), int(index_tip.y * frame.shape[0])

    distance = calculate_distance_2d(thumb_x, thumb_y, index_x, index_y)

    return distance < 50 

def get_hand_bounding_box(hand_landmarks, frame):
    image_width, image_height = frame.shape[1], frame.shape[0]
    x_coords = [landmark.x * image_width for landmark in hand_landmarks.landmark]
    y_coords = [landmark.y * image_height for landmark in hand_landmarks.landmark]
    
    x_min, x_max = min(x_coords), max(x_coords)
    y_min, y_max = min(y_coords), max(y_coords)
    
    bbox_width = x_max - x_min
    bbox_height = y_max - y_min
    
    return int(x_min), int(y_min), int(bbox_width), int(bbox_height)

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

cap = cv2.VideoCapture(0)

with mp_hands.Hands(
    max_num_hands=2,                
    min_detection_confidence=0.7,   
    min_tracking_confidence=0.7     
) as hands:

    if not cap.isOpened():
        print("Error: Could not access the camera.")
    else:
        print("Camera accessed successfully.")
        
        thumbs_up_sent = False
        fist_sent = False
        open_hand_sent = False

        while True:
            ret, frame = cap.read()
            
            if not ret:
                print("Error: Failed to grab frame.")
                break
            
            frame = cv2.flip(frame, 1)
            
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            results = hands.process(rgb_frame)
            
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    mp_drawing.draw_landmarks(
                        frame, hand_landmarks, mp_hands.HAND_CONNECTIONS,
                        mp_drawing.DrawingSpec(color=(0,255,0), thickness=2, circle_radius=2),
                        mp_drawing.DrawingSpec(color=(0,0,255), thickness=2)
                    )

                    x, y, bbox_width, bbox_height = get_hand_bounding_box(hand_landmarks, frame)
                    distance = calculate_distance_from_camera(bbox_width)
                    
                    if distance:
                        cv2.putText(frame, f"Distance: {distance:.2f} cm", (x, y - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)

                    if is_thumbs_up(hand_landmarks, frame) and not thumbs_up_sent:
                        send_sms("Some One is Danger!")
                        thumbs_up_sent = True

            cv2.imshow('Hand Action Analysis', frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

cap.release()
cv2.destroyAllWindows()
